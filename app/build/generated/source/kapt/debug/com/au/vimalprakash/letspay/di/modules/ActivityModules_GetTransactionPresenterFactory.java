// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.vimalprakash.letspay.di.modules;

import com.au.vimalprakash.letspay.modules.transaction.TransactionContract;
import com.au.vimalprakash.letspay.networking.LetsPayApi;
import com.au.vimalprakash.letspay.utils.SchedulersProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ActivityModules_GetTransactionPresenterFactory
    implements Factory<TransactionContract.Presenter> {
  private final ActivityModules module;

  private final Provider<LetsPayApi> letsPayApiProvider;

  private final Provider<SchedulersProvider> schedulersProvider;

  public ActivityModules_GetTransactionPresenterFactory(
      ActivityModules module,
      Provider<LetsPayApi> letsPayApiProvider,
      Provider<SchedulersProvider> schedulersProvider) {
    assert module != null;
    this.module = module;
    assert letsPayApiProvider != null;
    this.letsPayApiProvider = letsPayApiProvider;
    assert schedulersProvider != null;
    this.schedulersProvider = schedulersProvider;
  }

  @Override
  public TransactionContract.Presenter get() {
    return Preconditions.checkNotNull(
        module.getTransactionPresenter(letsPayApiProvider.get(), schedulersProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<TransactionContract.Presenter> create(
      ActivityModules module,
      Provider<LetsPayApi> letsPayApiProvider,
      Provider<SchedulersProvider> schedulersProvider) {
    return new ActivityModules_GetTransactionPresenterFactory(
        module, letsPayApiProvider, schedulersProvider);
  }
}

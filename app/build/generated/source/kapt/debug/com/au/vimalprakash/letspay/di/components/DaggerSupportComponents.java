// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.vimalprakash.letspay.di.components;

import com.au.vimalprakash.letspay.LetsPayApplication;
import com.au.vimalprakash.letspay.di.modules.SupportModules;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvideGsonFactory;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvideLetsPayAPIFactory;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvideOkHttpCacheFactory;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvideOkHttpClientFactory;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvideRetrofitFactory;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvideSchedulerProviderFactory;
import com.au.vimalprakash.letspay.di.modules.SupportModules_ProvidesApplicationFactory;
import com.au.vimalprakash.letspay.networking.LetsPayApi;
import com.au.vimalprakash.letspay.utils.SchedulersProvider;
import com.google.gson.Gson;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerSupportComponents implements SupportComponents {
  private Provider<Gson> provideGsonProvider;

  private Provider<LetsPayApplication> providesApplicationProvider;

  private Provider<Cache> provideOkHttpCacheProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<LetsPayApi> provideLetsPayAPIProvider;

  private Provider<SchedulersProvider> provideSchedulerProvider;

  private DaggerSupportComponents(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideGsonProvider =
        DoubleCheck.provider(SupportModules_ProvideGsonFactory.create(builder.supportModules));

    this.providesApplicationProvider =
        DoubleCheck.provider(
            SupportModules_ProvidesApplicationFactory.create(builder.supportModules));

    this.provideOkHttpCacheProvider =
        DoubleCheck.provider(
            SupportModules_ProvideOkHttpCacheFactory.create(
                builder.supportModules, providesApplicationProvider));

    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            SupportModules_ProvideOkHttpClientFactory.create(
                builder.supportModules, provideOkHttpCacheProvider));

    this.provideRetrofitProvider =
        DoubleCheck.provider(
            SupportModules_ProvideRetrofitFactory.create(
                builder.supportModules, provideGsonProvider, provideOkHttpClientProvider));

    this.provideLetsPayAPIProvider =
        DoubleCheck.provider(
            SupportModules_ProvideLetsPayAPIFactory.create(
                builder.supportModules, provideRetrofitProvider));

    this.provideSchedulerProvider =
        DoubleCheck.provider(
            SupportModules_ProvideSchedulerProviderFactory.create(builder.supportModules));
  }

  @Override
  public LetsPayApi getAccountDetailsApi() {
    return provideLetsPayAPIProvider.get();
  }

  @Override
  public Gson getGson() {
    return provideGsonProvider.get();
  }

  @Override
  public SchedulersProvider getSchedulersProvider() {
    return provideSchedulerProvider.get();
  }

  public static final class Builder {
    private SupportModules supportModules;

    private Builder() {}

    public SupportComponents build() {
      if (supportModules == null) {
        throw new IllegalStateException(SupportModules.class.getCanonicalName() + " must be set");
      }
      return new DaggerSupportComponents(this);
    }

    public Builder supportModules(SupportModules supportModules) {
      this.supportModules = Preconditions.checkNotNull(supportModules);
      return this;
    }
  }
}

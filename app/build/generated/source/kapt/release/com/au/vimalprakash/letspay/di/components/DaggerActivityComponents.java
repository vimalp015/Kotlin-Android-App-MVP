// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.vimalprakash.letspay.di.components;

import com.au.vimalprakash.letspay.di.modules.ActivityModules;
import com.au.vimalprakash.letspay.di.modules.ActivityModules_GetTransactionPresenterFactory;
import com.au.vimalprakash.letspay.di.modules.ActivityModules_ProvideMainActivityPresenterFactory;
import com.au.vimalprakash.letspay.modules.mainactivity.MainAcivityContract;
import com.au.vimalprakash.letspay.modules.mainactivity.MainActivity;
import com.au.vimalprakash.letspay.modules.mainactivity.MainActivity_MembersInjector;
import com.au.vimalprakash.letspay.modules.transaction.TransactionContract;
import com.au.vimalprakash.letspay.modules.transaction.TransactionFragment;
import com.au.vimalprakash.letspay.modules.transaction.TransactionFragment_MembersInjector;
import com.au.vimalprakash.letspay.networking.LetsPayApi;
import com.au.vimalprakash.letspay.utils.SchedulersProvider;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponents implements ActivityComponents {
  private Provider<MainAcivityContract.Presenter> provideMainActivityPresenterProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private Provider<LetsPayApi> getAccountDetailsApiProvider;

  private Provider<SchedulersProvider> getSchedulersProvider;

  private Provider<TransactionContract.Presenter> getTransactionPresenterProvider;

  private MembersInjector<TransactionFragment> transactionFragmentMembersInjector;

  private DaggerActivityComponents(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideMainActivityPresenterProvider =
        DoubleCheck.provider(
            ActivityModules_ProvideMainActivityPresenterFactory.create(builder.activityModules));

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(provideMainActivityPresenterProvider);

    this.getAccountDetailsApiProvider =
        new com_au_vimalprakash_letspay_di_components_SupportComponents_getAccountDetailsApi(
            builder.supportComponents);

    this.getSchedulersProvider =
        new com_au_vimalprakash_letspay_di_components_SupportComponents_getSchedulersProvider(
            builder.supportComponents);

    this.getTransactionPresenterProvider =
        DoubleCheck.provider(
            ActivityModules_GetTransactionPresenterFactory.create(
                builder.activityModules, getAccountDetailsApiProvider, getSchedulersProvider));

    this.transactionFragmentMembersInjector =
        TransactionFragment_MembersInjector.create(getTransactionPresenterProvider);
  }

  @Override
  public void inject(MainActivity activity) {
    mainActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(TransactionFragment fragment) {
    transactionFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private ActivityModules activityModules;

    private SupportComponents supportComponents;

    private Builder() {}

    public ActivityComponents build() {
      if (activityModules == null) {
        this.activityModules = new ActivityModules();
      }
      if (supportComponents == null) {
        throw new IllegalStateException(
            SupportComponents.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponents(this);
    }

    public Builder activityModules(ActivityModules activityModules) {
      this.activityModules = Preconditions.checkNotNull(activityModules);
      return this;
    }

    public Builder supportComponents(SupportComponents supportComponents) {
      this.supportComponents = Preconditions.checkNotNull(supportComponents);
      return this;
    }
  }

  private static
  class com_au_vimalprakash_letspay_di_components_SupportComponents_getAccountDetailsApi
      implements Provider<LetsPayApi> {
    private final SupportComponents supportComponents;

    com_au_vimalprakash_letspay_di_components_SupportComponents_getAccountDetailsApi(
        SupportComponents supportComponents) {
      this.supportComponents = supportComponents;
    }

    @Override
    public LetsPayApi get() {
      return Preconditions.checkNotNull(
          supportComponents.getAccountDetailsApi(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static
  class com_au_vimalprakash_letspay_di_components_SupportComponents_getSchedulersProvider
      implements Provider<SchedulersProvider> {
    private final SupportComponents supportComponents;

    com_au_vimalprakash_letspay_di_components_SupportComponents_getSchedulersProvider(
        SupportComponents supportComponents) {
      this.supportComponents = supportComponents;
    }

    @Override
    public SchedulersProvider get() {
      return Preconditions.checkNotNull(
          supportComponents.getSchedulersProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
